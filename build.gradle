plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}

//apply from: "task.gradle"


import org.gradle.api.internal.TaskInternal
import org.gradle.api.internal.tasks.TaskExecuter
import org.gradle.api.internal.AbstractTask
import org.gradle.api.internal.tasks.TaskExecutionContext
import org.gradle.api.internal.tasks.TaskStateInternal
import org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter
import org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter
import org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter
import org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter
import java.lang.reflect.Field

class Wrapper {
    static final class ReflectHelper {
        public static Object getFieldObj(Object obj, String fieldName) {
            try {
                def fieldDelegate = obj.getClass().getDeclaredField(fieldName)
                fieldDelegate.setAccessible(true)
                def delegate = fieldDelegate.get(obj)
                return delegate
            } catch (Exception e) {

            }
            return null
        }

        public static Object setFieldObj(Object instance, String fieldName, Object obj) {
            def fieldDelegate = instance.getClass().getDeclaredField(fieldName)
            fieldDelegate.setAccessible(true)
            def delegate = fieldDelegate.set(instance, obj)
            return delegate
        }

        public static void printFieldValues(Object instance) {
            Field[] fields = instance.getClass().declaredFields
            for (field in fields) {
                field.setAccessible(true)
                Object value = field.get(instance)
                println("filed:" + field + " value:" + value)
            }
        }

        public static void replaceExecuteAtMostOnceTaskExecuter(AbstractTask task) {
            def eventFiringTaskExecuter = task.getExecuter() as EventFiringTaskExecuter
            println eventFiringTaskExecuter
            def catchExceptionTaskExecuter = getFieldObj(eventFiringTaskExecuter, "delegate") as CatchExceptionTaskExecuter
            println catchExceptionTaskExecuter
            def delegate2 = getFieldObj(catchExceptionTaskExecuter, "delegate")
            println delegate2
            if (delegate2 instanceof ExecuteAtMostOnceTaskExecuter) {
                def skipOnlyIftaskExecuter = getFieldObj(delegate2, "executer") as SkipOnlyIfTaskExecuter
                println skipOnlyIftaskExecuter
                ExecuteRepeatedlyTaskExecuter executeRepeatedlyTaskExecuter = new ExecuteRepeatedlyTaskExecuter(skipOnlyIftaskExecuter)
                setFieldObj(catchExceptionTaskExecuter, "delegate", executeRepeatedlyTaskExecuter)
            }
        }
    }

    /**
     * 主要用来替换掉ExecuteAtMostOnceTaskExecuter
     */
    public static class ExecuteRepeatedlyTaskExecuter implements TaskExecuter {
        private static final Logger LOGGER = Logging.getLogger(ExecuteRepeatedlyTaskExecuter.class);
        private final TaskExecuter executer;

        public ExecuteRepeatedlyTaskExecuter(TaskExecuter executer) {
            this.executer = executer;
        }

        @Override
        public void execute(TaskInternal task, TaskStateInternal state, TaskExecutionContext context) {
            try {
                this.executer.execute(task, state, context)
            } catch (Exception e) {
                throw new RuntimeException(e)
            }
        }
    }

    void printlnExecuter(TaskExecuter executer) {
        Object delegate = ReflectHelper.getFieldObj(executer, "delegate")
        Object childDelegate = null
        if (delegate == null) {
            Object executerChild = ReflectHelper.getFieldObj(executer, "executer")
            if (executerChild == null) {
                return
            }
            childDelegate = executerChild
        } else {
            childDelegate = delegate
        }
        println ">>> " + executer + " child: " + childDelegate
        if (childDelegate instanceof TaskExecuter) {
            printlnExecuter(childDelegate)
        }
    }

/**
 * 用来自定义一个任务
 */
    public static class DefaultTaskWrapper extends DefaultTask {
        private DefaultTask originalTask;

        @javax.inject.Inject
        public DefaultTaskWrapper(DefaultTask originalTask) {
            this.originalTask = originalTask
        }
    }

    public static final class ActionWrapper implements Action<Task> {
        private DefaultTask originalTask;

        public ActionWrapper(DefaultTask originalTask) {
            this.originalTask = originalTask
            ReflectHelper.replaceExecuteAtMostOnceTaskExecuter(originalTask)
        }

        @Override
        void execute(Task task) {
            println("$this.${this.originalTask} : execute")
            this.originalTask.execute()
        }
    }
}


task startBuild {
    println "------------------------------------------ startBuild:"
    doFirst {
        println "------------------------------------------ startBuild: start"
    }
    doLast {
        println "------------------------------------------ startBuild: end"
    }
}
task startTask {
    doFirst {
        println "start startTask dependsOn: $dependsOn"
    }
    doLast {
        println ">> end startTask"
    }
}

task createTask {
    println "this is test createTask...."

    doFirst {

    }

    2.times {
        println "start create task: testRunTask${it}"

//        def task = tasks.create(name: "testRunTask__${it}", type: DefaultTaskWrapper.class, constructorArgs: [startBuild], action: new TaskAction(startBuild)) << {
//            println "----- testRunTask${it}:" + dependsOn
//        }

        def task = tasks.create(name: "testRunTask__${it}", action: new Wrapper.ActionWrapper(startBuild)) << {
            println "----- testRunTask${it}:" + dependsOn
        }

//        def task = tasks.create(name: "testRunTask__${it}", dependsOn: startBuild) << {
//            println "----- testRunTask${it}:" + dependsOn
//        }

//        DefaultTaskWrapper abc = new DefaultTaskWrapper("testRunTaskDependsOn${it}", startBuild)
//        def task = tasks.create(name: "testRunTask${it}", dependsOn: startBuild) << {
//            println ">>> testRunTask${it}:" + dependsOn
//        }
        startTask.dependsOn task
    }
    finalizedBy startTask
}



